# üõ°Ô∏è This file is MIT licensed. See LICENSE in the repository.
# -------------------------------------------------------------------------------------
# üõ°Ô∏è NOTE: For most repositories, you should strongly consider using GitHub's official code security tools
# (such as CodeQL and Dependabot), which are free for public repositories.
# See https://github.com/features/security for details.
#
# ‚ö†Ô∏è DISCLAIMER:
# This workflow is a community-developed tool and is not affiliated with, endorsed by, or officially supported by GitHub or the CodeQL team.
# It is provided as-is for public use.
# This workflow should not be considered an official GitHub or CodeQL product.
# Use at your own discretion.
#
# üöÄ Workflow:
# - Runs CodeQL analysis on a repository
# - Scans for security and quality issues
# - Automatically creates a GitHub issue for EACH new finding
# - Attaches the specific SARIF finding data to each issue
# - Is reusable and can be called from other workflows
#
# üß© How it works:
# - Runs CodeQL analysis for the specified language.
# - Generates a SARIF report with security and quality findings.
# - Processes the SARIF file and for each result:
#   - Deduplicates findings using a hash of its rule, location, and message.
#   - Creates a GitHub issue for each new finding, labeled 'codeql-finding'.
#   - Attaches the specific SARIF result for that finding in a collapsible section.
#   - Skips open issues and respects closed ones (does not reopen).
# - Can be called from other workflows using 'workflow_call'.
# -------------------------------------------------------------------------------------
# üß™ Usage Example
#
# To use this action in your workflow, add the following to your workflow YAML:
#
# name: 'CodeQL'
#
# permissions:
#   security-events: write
#   actions: read
#   contents: read
#
# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main
#   schedule:
#     - cron: '30 1 * * 0'
#
# jobs:
#   analyze:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
#
#       - name: Initialize CodeQL
#         uses: pixpilot/github/actions/codeql-issue-maker@main
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}
#           # language: 'javascript'
#           # exclude: 'tests/**,**/__tests__/**,**/*.test.ts,*.spec.ts,**/*.min.js,dist/**,build/**,coverage/**,*.md,*.txt,*.pdf,*.png,*.jpg,*.ico'
# -------------------------------------------------------------------------------------

name: CodeQL Issue Maker
description: 'Runs CodeQL analysis, filters files, and creates GitHub issues for findings.'

inputs:
  language:
    description: The programming language to scan
    required: true
    default: javascript
  qls-profile:
    description: 'The CodeQL QLS profile to use (e.g., security-and-quality, security-extended)'
    required: false
    default: security-and-quality
  include:
    description: Glob pattern(s) to include files (comma-separated)
    required: false
  exclude:
    description: Glob pattern(s) to exclude files (comma-separated)
    required: false
  token:
    description: GITHUB_TOKEN for creating issues
    required: true

runs:
  using: composite
  steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Filter Files Based on Include/Exclude Patterns
      id: filter-files
      shell: bash
      run: |
        mkdir -p filtered-repo
        matches_pattern() {
          local file="$1"
          local patterns="$2"
          if [ -z "$patterns" ]; then
            return 1
          fi
          IFS=',' read -ra PATTERN_ARRAY <<< "$patterns"
          for pattern in "${PATTERN_ARRAY[@]}"; do
            pattern=$(echo "$pattern" | xargs)
            if [[ "$file" == $pattern ]]; then
              return 0
            fi
          done
          return 1
        }
        find . -type f -name "*" | while read -r file; do
          file="${file#./}"
          if [[ "$file" == .git/* ]] || [[ "$file" == .github/* ]] || [[ "$file" == node_modules/* ]]; then
            continue
          fi
          should_include=true
          if [ -n "${{ inputs.exclude }}" ]; then
            if matches_pattern "$file" "${{ inputs.exclude }}"; then
              should_include=false
            fi
          fi
          if [ -n "${{ inputs.include }}" ] && [ "$should_include" = true ]; then
            if ! matches_pattern "$file" "${{ inputs.include }}"; then
              should_include=false
            fi
          fi
          if [ "$should_include" = true ]; then
            mkdir -p "filtered-repo/$(dirname "$file")"
            cp "$file" "filtered-repo/$file"
            echo "Including: $file"
          else
            echo "Excluding: $file"
          fi
        done
        file_count=$(find filtered-repo -type f | wc -l)
        echo "Total files after filtering: $file_count"
        echo "filtered-path=$(pwd)/filtered-repo" >> $GITHUB_OUTPUT

    - name: Setup CodeQL CLI
      id: initialize
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ inputs.language }}

    - name: Create CodeQL Database
      shell: bash
      run: |
        echo "Creating CodeQL database from filtered files..."
        echo "Filtered files location: ${{ steps.filter-files.outputs.filtered-path }}"
        cd "${{ steps.filter-files.outputs.filtered-path }}"
        ${{ steps.initialize.outputs.codeql-path }} database create ../codeql-db --language=${{ inputs.language }} --source-root=.
        cd ..

    - name: Analyze with CodeQL CLI
      shell: bash
      run: |
        ${{ steps.initialize.outputs.codeql-path }} database analyze codeql-db --ram=4000 --format=sarif-latest --output=results.sarif ${{ inputs.language }}-${{ inputs.qls-profile }}.qls

    - name: Process SARIF and Create Issues
      uses: actions/github-script@v7
      with:
        github-token: ${{ inputs.token }}
        script: |
          const fs = require('fs');
          const crypto = require('crypto');
          const sarifPath = 'results.sarif';
          if (!fs.existsSync(sarifPath)) {
            console.log('No SARIF file found. Clean scan.');
            return;
          }
          const sarif = JSON.parse(fs.readFileSync(sarifPath, 'utf8'));
          if (!sarif.runs || sarif.runs.length === 0) {
            console.log('No runs found in SARIF file.');
            return;
          }
          const { data: allIssues } = await github.rest.issues.listForRepo({
            ...context.repo,
            state: 'all',
            labels: 'codeql-finding'
          });
          for (const run of sarif.runs) {
            if (!run.results) {
              continue;
            }
            for (const result of run.results) {
              const ruleId = result.ruleId;
              const msg = result.message.text;
              const partialFingerprints = JSON.stringify(result.partialFingerprints);
              const findingHash = crypto.createHash('md5')
                .update(`${ruleId}|${partialFingerprints}|${msg}`)
                .digest('hex')
                .substring(0, 8);
              const title = `CodeQL Finding: ${ruleId} [${findingHash}]`;
              let locationsList = '';
              if (result.locations) {
                for (const loc of result.locations) {
                  const locFile = loc.physicalLocation.artifactLocation.uri;
                  const locLine = loc.physicalLocation.region.startLine;
                  const locMessage = loc.message ? ` - ${loc.message.text}` : '';
                  locationsList += `- **File:** \`${locFile}\` **Line:** ${locLine}${locMessage}\n`;
                }
              }
              const resultJson = JSON.stringify(result, null, 2);
              const body = [
                `## üö® Security Alert: ${ruleId}`,
                `<strong>Message:</strong> ${msg}`,
                `<strong>Finding ID:</strong> <code>${findingHash}</code>`,
                '---',
                '### Vulnerability Locations',
                locationsList,
                '---',
                '<details>',
                '<summary>Click to view SARIF finding details</summary>',
                '',
                '```json',
                resultJson,
                '```',
                '</details>',
                '',
                '---',
                '*This issue was automatically generated by a custom CodeQL workflow.*'
              ].join('\n\n');
              const existingIssue = allIssues.find(issue => issue.title === title);
              if (existingIssue) {
                if (existingIssue.state === 'closed') {
                  console.log(`Issue "${title}" was previously closed. Respecting user decision - not reopening.`);
                } else {
                  console.log(`Issue "${title}" already exists and is open. Skipping.`);
                }
              } else {
                console.log(`Creating new issue: "${title}"`);
                await github.rest.issues.create({
                  ...context.repo,
                  title,
                  body,
                  labels: ['codeql-finding']
                });
              }
            }
          }
